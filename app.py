import streamlit as st
import os
from pathlib import Path
import google.generativeai as genai
from PIL import Image
from dotenv import load_dotenv
import io
import base64
# Load environment variables from .env file
load_dotenv()

# Configure genai with API key
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

# Create the model with the updated configuration
generation_config = {
    "temperature": 0.4,
    "top_p": 0.95,
    "top_k": 32,
    "max_output_tokens": 4096,
}

model = genai.GenerativeModel(
    model_name="gemini-1.5-pro-002",
    generation_config=generation_config,
)

# Set the page configuration
st.set_page_config(page_title="VitalImage Analytics", page_icon="üè•")

# Set the logo
logo_path = Path("logo.jpg")
if logo_path.exists():
    try:
        logo = Image.open(logo_path)
        st.image(logo, width=150)
    except Exception as e:
        st.warning(f"Error loading logo: {e}")
else:
    st.warning("Logo file not found. Please make sure 'logo.jpg' is in the same directory as the script.")

# Set the title and subtitle
st.title("üíóüì∏ Vital Image Analytics üë©‚Äç‚öïÔ∏èüè•")
st.subheader("An application that helps users identify and analyze medical images")

# File uploader
uploaded_file = st.file_uploader("Upload the medical image for analysis", type=["png", "jpg", "jpeg"])


def analyze_image(image):
    prompt = "Analyze this medical image. Describe what you see, identify any potential abnormalities or conditions, and provide any relevant medical insights. Please note that this is an AI-generated analysis and should not be considered a substitute for professional medical advice."
    
    buffered = io.BytesIO()
    image.save(buffered, format="JPEG")
    img_str = base64.b64encode(buffered.getvalue()).decode()

    response = model.generate_content([prompt, img_str])
    return response.text

# Submit button
submit_button = st.button("Generate Analysis")

if submit_button and uploaded_file is not None:
    # Process the uploaded image
    image = Image.open(uploaded_file)
    
    # Display the uploaded image
    st.image(image, caption="Uploaded Image", use_column_width=True)
    
    # Analyze the image
    with st.spinner("Analyzing the image..."):
        analysis = analyze_image(image)
    
    # Display the analysis
    st.subheader("Image Analysis")
    st.write(analysis)
    
    st.warning("Please note that this analysis is generated by an AI model and should not be considered as a substitute for professional medical advice, diagnosis, or treatment. Always consult with a qualified healthcare provider for medical concerns.")

elif submit_button and uploaded_file is None:
    st.error("Please upload an image before generating the analysis.")

# Add a disclaimer at the bottom of the page
st.markdown("---")
st.caption("Disclaimer: This application is for informational purposes only and is not intended to provide medical advice. Always consult with a qualified healthcare professional for medical diagnosis and treatment.")
